Importer func.clear, math, numpy et matplotlib.pyplot depuis les modules correspondants

Fonction trinome(a, b, c, x)
    Retourner a * x^2 + b * x + c

Fonction discriminant(a, b, c)
    Retourner b^2 - 4 * a * c

Fonction deltaCalc(a, b, c)
    delta <- discriminant(a, b, c)
    Si delta > 0
        s1 <- (-b - racine_carree(delta)) / (2 * a)
        s2 <- (-b + racine_carree(delta)) / (2 * a)
        Retourner "Solution 1: " + formater(s1, 2) + "\nSolution 2: " + formater(s2, 2)
    Sinon Si delta = 0
        s0 <- -b / (2 * a)
        Retourner "Solution : " + formater(s0, 2)
    Sinon
        Retourner "Aucune solution"

Fonction plot_trinome(a, b, c)
    Créer un graphique avec le titre "Trinôme a*x^2 + b*x + c"
    Définir l'intervalle de trace x de -10 à 10 avec 100 points
    Tracer la courbe y = trinome(a, b, c, x)
    Tracer les axes x et y
    Afficher le graphique

Fonction runQE()
    Effacer l'écran
    a <- Entrée_utilisateur("Valeur de A: ")
    b <- Entrée_utilisateur("Valeur de B: ")
    c <- Entrée_utilisateur("Valeur de C: ")
    Effacer l'écran
    Afficher "Equation : " + formater(a, 0) + "x² + " + formater(b, 0) + "x + " + formater(c, 0)
    Afficher deltaCalc(a, b, c)
    graph <- Entrée_utilisateur("\nAfficher le graphique ? (O/N)")
    Si graph converti en minuscules égal à "o"
        Appeler plot_trinome(a, b, c)
    Sinon
        Retourner Nul